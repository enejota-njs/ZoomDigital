--lpm_decode CBX_DECLARE_ALL_CONNECTED_PORTS="OFF" DEVICE_FAMILY="Cyclone V" LPM_DECODES=10 LPM_WIDTH=4 data eq
--VERSION_BEGIN 20.1 cbx_cycloneii 2020:06:05:12:04:51:SJ cbx_lpm_add_sub 2020:06:05:12:04:51:SJ cbx_lpm_compare 2020:06:05:12:04:51:SJ cbx_lpm_decode 2020:06:05:12:04:51:SJ cbx_mgl 2020:06:05:12:11:10:SJ cbx_nadder 2020:06:05:12:04:51:SJ cbx_stratix 2020:06:05:12:04:51:SJ cbx_stratixii 2020:06:05:12:04:51:SJ  VERSION_END


-- Copyright (C) 2020  Intel Corporation. All rights reserved.
--  Your use of Intel Corporation's design tools, logic functions 
--  and other software and tools, and any partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Intel Program License 
--  Subscription Agreement, the Intel Quartus Prime License Agreement,
--  the Intel FPGA IP License Agreement, or other applicable license
--  agreement, including, without limitation, that your use is for
--  the sole purpose of programming logic devices manufactured by
--  Intel and sold by Intel or its authorized distributors.  Please
--  refer to the applicable agreement for further details, at
--  https://fpgasoftware.intel.com/eula.



--synthesis_resources = lut 16 
SUBDESIGN decode_g2a
( 
	data[3..0]	:	input;
	eq[9..0]	:	output;
) 
VARIABLE 
	data_wire[2..0]	: WIRE;
	enable_wire1	: WIRE;
	enable_wire2	: WIRE;
	eq_node[9..0]	: WIRE;
	eq_wire1w[7..0]	: WIRE;
	eq_wire2w[7..0]	: WIRE;
	w_anode1265w[3..0]	: WIRE;
	w_anode1282w[3..0]	: WIRE;
	w_anode1292w[3..0]	: WIRE;
	w_anode1302w[3..0]	: WIRE;
	w_anode1312w[3..0]	: WIRE;
	w_anode1322w[3..0]	: WIRE;
	w_anode1332w[3..0]	: WIRE;
	w_anode1342w[3..0]	: WIRE;
	w_anode1352w[3..0]	: WIRE;
	w_anode1363w[3..0]	: WIRE;
	w_anode1373w[3..0]	: WIRE;
	w_anode1383w[3..0]	: WIRE;
	w_anode1393w[3..0]	: WIRE;
	w_anode1403w[3..0]	: WIRE;
	w_anode1413w[3..0]	: WIRE;
	w_anode1423w[3..0]	: WIRE;

BEGIN 
	data_wire[2..0] = data[2..0];
	enable_wire1 = (! data[3..3]);
	enable_wire2 = data[3..3];
	eq[] = eq_node[];
	eq_node[] = ( eq_wire2w[1..0], eq_wire1w[]);
	eq_wire1w[] = ( w_anode1342w[3..3], w_anode1332w[3..3], w_anode1322w[3..3], w_anode1312w[3..3], w_anode1302w[3..3], w_anode1292w[3..3], w_anode1282w[3..3], w_anode1265w[3..3]);
	eq_wire2w[] = ( w_anode1423w[3..3], w_anode1413w[3..3], w_anode1403w[3..3], w_anode1393w[3..3], w_anode1383w[3..3], w_anode1373w[3..3], w_anode1363w[3..3], w_anode1352w[3..3]);
	w_anode1265w[] = ( (w_anode1265w[2..2] & (! data_wire[2..2])), (w_anode1265w[1..1] & (! data_wire[1..1])), (w_anode1265w[0..0] & (! data_wire[0..0])), enable_wire1);
	w_anode1282w[] = ( (w_anode1282w[2..2] & (! data_wire[2..2])), (w_anode1282w[1..1] & (! data_wire[1..1])), (w_anode1282w[0..0] & data_wire[0..0]), enable_wire1);
	w_anode1292w[] = ( (w_anode1292w[2..2] & (! data_wire[2..2])), (w_anode1292w[1..1] & data_wire[1..1]), (w_anode1292w[0..0] & (! data_wire[0..0])), enable_wire1);
	w_anode1302w[] = ( (w_anode1302w[2..2] & (! data_wire[2..2])), (w_anode1302w[1..1] & data_wire[1..1]), (w_anode1302w[0..0] & data_wire[0..0]), enable_wire1);
	w_anode1312w[] = ( (w_anode1312w[2..2] & data_wire[2..2]), (w_anode1312w[1..1] & (! data_wire[1..1])), (w_anode1312w[0..0] & (! data_wire[0..0])), enable_wire1);
	w_anode1322w[] = ( (w_anode1322w[2..2] & data_wire[2..2]), (w_anode1322w[1..1] & (! data_wire[1..1])), (w_anode1322w[0..0] & data_wire[0..0]), enable_wire1);
	w_anode1332w[] = ( (w_anode1332w[2..2] & data_wire[2..2]), (w_anode1332w[1..1] & data_wire[1..1]), (w_anode1332w[0..0] & (! data_wire[0..0])), enable_wire1);
	w_anode1342w[] = ( (w_anode1342w[2..2] & data_wire[2..2]), (w_anode1342w[1..1] & data_wire[1..1]), (w_anode1342w[0..0] & data_wire[0..0]), enable_wire1);
	w_anode1352w[] = ( (w_anode1352w[2..2] & (! data_wire[2..2])), (w_anode1352w[1..1] & (! data_wire[1..1])), (w_anode1352w[0..0] & (! data_wire[0..0])), enable_wire2);
	w_anode1363w[] = ( (w_anode1363w[2..2] & (! data_wire[2..2])), (w_anode1363w[1..1] & (! data_wire[1..1])), (w_anode1363w[0..0] & data_wire[0..0]), enable_wire2);
	w_anode1373w[] = ( (w_anode1373w[2..2] & (! data_wire[2..2])), (w_anode1373w[1..1] & data_wire[1..1]), (w_anode1373w[0..0] & (! data_wire[0..0])), enable_wire2);
	w_anode1383w[] = ( (w_anode1383w[2..2] & (! data_wire[2..2])), (w_anode1383w[1..1] & data_wire[1..1]), (w_anode1383w[0..0] & data_wire[0..0]), enable_wire2);
	w_anode1393w[] = ( (w_anode1393w[2..2] & data_wire[2..2]), (w_anode1393w[1..1] & (! data_wire[1..1])), (w_anode1393w[0..0] & (! data_wire[0..0])), enable_wire2);
	w_anode1403w[] = ( (w_anode1403w[2..2] & data_wire[2..2]), (w_anode1403w[1..1] & (! data_wire[1..1])), (w_anode1403w[0..0] & data_wire[0..0]), enable_wire2);
	w_anode1413w[] = ( (w_anode1413w[2..2] & data_wire[2..2]), (w_anode1413w[1..1] & data_wire[1..1]), (w_anode1413w[0..0] & (! data_wire[0..0])), enable_wire2);
	w_anode1423w[] = ( (w_anode1423w[2..2] & data_wire[2..2]), (w_anode1423w[1..1] & data_wire[1..1]), (w_anode1423w[0..0] & data_wire[0..0]), enable_wire2);
END;
--VALID FILE
